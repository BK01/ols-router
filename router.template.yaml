apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: route-planner-template-databc
metadata:
  name: route-planner-template-databc

  annotations:
    openshift.io/display-name: "DataBC Route Planner API"
    description: >-
      An example Route Planner API application with a Cassandra cluster,
      a Data Admin WebApp and a Router Planer API. For more information
      about using this template, including OpenShift considerations, see
      https://docs.openshift.com/container-platform/4.6/openshift_images/using-templates.html.

      Note: Logs for router nodes are persisted in PCVs.
    openshift.io/long-description: >-
      This template defines resources needed to develop a Route Planner API
      application, including a build configuration, application DeploymentConfig, and
      configuration database DeploymentConfig.  The database is stored in
      persistent storage.

    tags: "router,java,gis,location"
    iconClass: icon-spring
    openshift.io/provider-display-name: "Data Systems and Services, DataBC"
    openshift.io/documentation-url: "https://github.com/bcgov/ols-router"
    openshift.io/support-url: "https://access.redhat.com"
message: |-
  Your admin credentials are ${ADMIN_USERNAME}:${ADMIN_PASSWORD}
  The following objects have been created in you project:

  StatefulSet
    ols-router-web        - Route Planne API cluster

  Service
    ols-router-web        - Route Planner API WebApp
    ols-router-admin      - Config Admin WebApp

  Route
    ols-router-admin      - Router - Config Admin WebApp

  DeploymentConfig
    N/A

  Deployment
    ols-router-admin      - Config Admin WebApp - Deployment

  NetworkPolicy
    allow-from-openshift-ingress
    allow-same-namespace
    deny-by-default
    allow-traffic-from-gateway-to-${APP_NAME}-${ENV}

parameters:
  - name: TOOLS_NAMESPACE
    description: The tools namspace where image streams will be pulled from.
    required: true
  - description: A common label that will be applied to all objects
    displayName: App Label
    name: APP_NAME
    required: true
    value: router
  - description: The environment i.e. on of -dev, -test, -prod.  This will be appended to hostnames so routes don't collide across namespaces.
    displayName: App Environment
    name: ENV
    required: true
  - description: The hostname for the Admin App.
    displayName: Admin configurtion app hostname
    name: ROUTER_ADMIN_HOSTNAME
    required: true
    value: router-admin
  - description: The hostname for the Router API App.
    displayName: Router API endpoint hostname.
    name: ROUTER_API_HOSTNAME
    required: true
    value: router-api
  - description: Default route subdomain - use apps.silver.devops.gov.bc.ca
    displayName: Route subdomain
    name: ROUTE_SUBDOMAIN
    required: true
    value:  apps.silver.devops.gov.bc.ca
  - description: minio secret for the data provider access to pull router configs
    displayName: MinIO secret
    name: MINIO_SECRET
    required: true
    value:  minio-router-datastore-dlv
  - name: "ROUTER_IS_TAG"
    description: "The image stream tag to use for the ols-router-sidecar"
    required: true
  - name: "DATA_ADMIN_IS_TAG"
    description: "The image stream tag to use for the ols-admin-sidecar"
    required: true
  - name: "MINIO_BUCKET"
    description: "minio bucket containing config files"
    value: router-configs-dev
  - name: "DATA_PROVIDER_URL"
    description: "URL for data provider bucket containing router config files"
    value: https://minio-router-datastore-prod.apps.silver.devops.gov.bc.ca/
    requited: true

objects:

# StatefulSet for ols-router-web
- kind: StatefulSet
  apiVersion: apps/v1
  metadata:
    labels:
      app: ols-router-web
      statefulset: ols-router-web
    name: ols-router-web
  spec:
    podManagementPolicy: OrderedReady
    replicas: 4
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        statefulset: ols-router-web
    serviceName: ols-router-web
    template:
      metadata:
        labels:
          app: ols-router-web
          statefulset: ols-router-web
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: statefulset
                  operator: In
                  values:
                  - ols-router-web
              topologyKey: kubernetes.io/hostname
        initContainers:
        - command:
          - cp
          - /ols-router.war
          - /app/ROOT.war
          image: image-registry.openshift-image-registry.svc:5000/${TOOLS_NAMESPACE}/ols-router-sidecar:${ROUTER_IS_TAG}
          imagePullPolicy: Always
          name: war
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app
            name: app-volume
        containers:
        - command:
          - catalina.sh
          - run
          env:
          - name: CATALINA_BASE
            value: /usr/local/tomcat
          - name: JAVA_OPTS
            value: -XX:OnOutOfMemoryError="kill -15 %p" -XX:MaxRAMPercentage=75.0
          - name: OLS_FILE_CONFIGURATION_URL
            value: file://apps/config/router/${MINIO_BUCKET}/
          - name: OLS_ROUTER_CONFIGURATION_STORE
            value: ca.bc.gov.ols.config.FileConfigurationStore
          image: tomcat:9-jre11-slim
          imagePullPolicy: IfNotPresent
          name: tomcat
          ports:
          - containerPort: 8080
            name: catalina-http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 270
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "500m"
              memory: 2Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/tomcat/logs
            name: router-logs
          - mountPath: /usr/local/tomcat/work
            name: tc-work
          - mountPath: /usr/local/tomcat/temp
            name: tc-work
          - mountPath: /usr/local/tomcat/conf/Catalina
            name: tc-conf
          - mountPath: /usr/local/tomcat/webapps
            name: app-volume
          - name: router-config
            mountPath: /apps/config/router
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tc-work
        - emptyDir: {}
          name: tc-conf
        - emptyDir: {}
          name: app-volume
        - name: router-config
          persistentVolumeClaim:
            claimName: router-configs
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        name: router-logs
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: netapp-block-standard
# Deployment for ols-router-admin
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    generation: 1
    labels:
      app: ols-router-admin
      name: ols-router-admin
      template: ols-router-admin
    name: ols-router-admin
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ols-router-admin
        name: ols-router-admin
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ols-router-admin
          name: ols-router-admin
      spec:
        containers:
        - command:
          - catalina.sh
          - run
          env:
          - name: CATALINA_BASE
            value: /usr/local/tomcat
          - name: OLS_FILE_CONFIGURATION_URL
            value: file://apps/config/router/${MINIO_BUCKET}/
          - name: OLS_ROUTER_CONFIGURATION_STORE
            value: ca.bc.gov.ols.config.FileConfigurationStore
          image: tomcat:9-jre11-slim
          imagePullPolicy: IfNotPresent
          name: tomcat
          ports:
          - containerPort: 8080
            name: catalina-http
            protocol: TCP
          resources:
            limits:
              cpu: "500m"
              memory: 2Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/tomcat/logs
            name: tc-work
          - mountPath: /usr/local/tomcat/work
            name: tc-work
          - mountPath: /usr/local/tomcat/temp
            name: tc-work
          - mountPath: /usr/local/tomcat/conf/Catalina
            name: tc-conf
          - mountPath: /usr/local/tomcat/webapps
            name: app-volume
          - name: router-config
            mountPath: /apps/config/router
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - cp
          - /ols-router-admin.war
          - /app/int.war
          image: image-registry.openshift-image-registry.svc:5000/${TOOLS_NAMESPACE}/ols-router-admin-sidecar:${DATA_ADMIN_IS_TAG}
          imagePullPolicy: Always
          name: war
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app
            name: app-volume
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tc-work
        - emptyDir: {}
          name: tc-conf
        - emptyDir: {}
          name: app-volume
        - name: router-config
          persistentVolumeClaim:
            claimName: router-configs
  status: {}
# minio client to sync content for admin app
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APP_NAME}-${ENV}-data-provider-monitor
    generation: 1
    labels:
      app: ${APP_NAME}-${ENV}-data-provider-monitor
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP_NAME}-${ENV}-data-provider-monitor
        name: ${APP_NAME}-${ENV}-data-provider-monitor
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}-${ENV}-data-provider-monitor
          name: ${APP_NAME}-${ENV}-data-provider-monitor
      spec:
        volumes:
          - name: router-configs
            persistentVolumeClaim:
              claimName: router-configs
          - name: router-mc
            persistentVolumeClaim:
              claimName: router-mc
          - name: router-configs
            persistentVolumeClaim:
              claimName: router-configs
        containers:
          - resources:
              limits:
                cpu: 250m
                memory: 1Gi
              requests:
                cpu: 50m
                memory: 256Mi
            terminationMessagePath: /dev/termination-log
            name: ${APP_NAME}-data-provider-monitor
            env:
              - name: MINIO_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: ${MINIO_SECRET}
                    key: minioAccessKey
              - name: MINIO_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${MINIO_SECRET}
                    key: minioSecretKey
              - name: DATA_PROVIDER_URL
                value: ${DATA_PROVIDER_URL}
              - name: MINIO_BUCKET
                value: ${MINIO_BUCKET}
            ports:
              - containerPort: 9000
                protocol: TCP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: router-configs
                mountPath: /data
              - name: router-mc
                mountPath: /.mc
            terminationMessagePolicy: File
            image: >-
              image-registry.openshift-image-registry.svc:5000/${TOOLS_NAMESPACE}/minio-client:latest
            args:
              - -C
              - /data
              - server
              - /data
            readinessProbe:
              httpGet:
                path: /minio/health/ready
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 120
              periodSeconds: 15
              timeoutSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            lifecycle:
              postStart:
                exec:
                  command:
                    - "sh"
                    - "-c"
                    - >
                      mc alias set router-prod $DATA_PROVIDER_URL $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;

                      mc cp --recursive router-prod/$MINIO_BUCKET/ /data/$MINIO_BUCKET/;

                      nohup mc mirror --watch /data/$MINIO_BUCKET/ router-prod/$MINIO_BUCKET/ >/dev/null 2>&1 &
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    strategy:
      type: Recreate
    revisionHistoryLimit: 10
    progressDeadlineSeconds: 600
# Serice for ols-router-admin
- kind: Service
  apiVersion: v1
  metadata:
    creationTimestamp: null
    name: ols-router-admin
  spec:
    ports:
    - name: ols-router-admin
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ols-router-admin
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
# Route for ols-router-admin
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    creationTimestamp: null
    name: ols-router-admin
  spec:
    host: ${ROUTER_ADMIN_HOSTNAME}-${ENV}.${ROUTE_SUBDOMAIN}
    path: /int/
    port:
      targetPort: ols-router-admin
    tls:
      termination: edge
    to:
      kind: Service
      name: ols-router-admin
      weight: 100
    wildcardPolicy: None
  status:
    ingress: null
# Service for ols-router-web
- kind: Service
  apiVersion: v1
  metadata:
    creationTimestamp: null
    name: ols-router-web
  spec:
    ports:
    - name: ols-router-web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ols-router-web
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
# For initial deployment you may want to create a route.
# Routes should be managed through the Kong API Gateway.
# see ... for instructions on how to configure Kong gateway
# routes.
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    creationTimestamp: null
    name: ols-router-api
  spec:
    host: ${ROUTER_API_HOSTNAME}-${ENV}.${ROUTE_SUBDOMAIN}
    port:
      targetPort: ols-router-web
    tls:
      termination: edge
    to:
      kind: Service
      name: ols-router-web
      weight: 100
    wildcardPolicy: None
  status:
    ingress: null
- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: allow-from-openshift-ingress
  spec:
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            network.openshift.io/policy-group: ingress
    podSelector: {}
    policyTypes:
    - Ingress
- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: allow-same-namespace
  spec:
    ingress:
    - from:
      - podSelector: {}
    podSelector: {}
    policyTypes:
    - Ingress
- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: deny-by-default
  spec:
    podSelector: {}
    policyTypes:
    - Ingress
- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: allow-traffic-from-gateway-to-${APP_NAME}-${ENV}
  spec:
    podSelector:
      matchLabels:
        app: ols-router-web
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                environment: test
                name: 264e6f
      - from:
          - namespaceSelector:
              matchLabels:
                environment: prod
                name: 264e6f
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: router-configs
    finalizers:
      - kubernetes.io/pvc-protection
  spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 100Mi
    storageClassName: netapp-file-standard
    volumeMode: Filesystem
  status:
    phase: Bound
    accessModes:
      - ReadWriteMany
    capacity:
      storage: 100Mi
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: router-mc
    finalizers:
      - kubernetes.io/pvc-protection
  spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 100Mi
    storageClassName: netapp-file-standard
    volumeMode: Filesystem
  status:
    phase: Bound
    accessModes:
      - ReadWriteOnce
    capacity:
      storage: 100Mi
